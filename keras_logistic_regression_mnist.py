# -*- coding: utf-8 -*-
"""keras_logistic_regression_mnist.ipynb

Automatically generated by Colaboratory.

"""

import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, InputLayer
from keras.optimizers import Adagrad
import numpy as np

"""Load MNIST data, and transform to feed keras"""

(x_train, y_train), (x_test, y_test) = mnist.load_data()

cat_num = len(set(y_test))

train_size, y, x = x_train.shape
test_size = x_test.shape[0]
input_size = x*y

x_train  = x_train.reshape(train_size, input_size)
x_test   = x_test.reshape(test_size, input_size)
x_train = x_train.astype('float32')
x_test  = x_test.astype('float32')
x_train, x_test = x_train / 255.0, x_test / 255.0
y_train = keras.utils.to_categorical(y_train, cat_num)
y_test  = keras.utils.to_categorical(y_test, cat_num)

"""Simple logistic regression model"""

model = Sequential()
model.add(InputLayer(input_shape=(input_size,)))
model.add(Dense(cat_num, activation='softmax'))

model.compile(loss='categorical_crossentropy', optimizer=Adagrad(), metrics=['accuracy'])

"""Set parameters"""

batch_size = 128
epochs = 30

"""Learning process with validation"""

model.fit(x_train, y_train, batch_size=batch_size, epochs=epochs, verbose=1, validation_data=(x_test, y_test))
